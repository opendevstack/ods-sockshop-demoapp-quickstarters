apiVersion: v1
kind: Template
labels:
  template: monorepo-component-template
  app: '${PROJECT}-${COMPONENT}'
parameters:
  - name: PROJECT
    displayName: Application
    description: The name of the application project.
    required: true
  - name: COMPONENT
    displayName: Component
    description: The name of the application component.
    required: true
  - name: ENV
    displayName: Environment
    description: The environment stage.
    required: true
  - name: MEMORY_LIMIT
    displayName: Memory Limit
    description: Maximum amount of memory available for the container.
    value: 256Mi
  - name: MEMORY_REQUEST
    displayName: Memory Request
    description: Minimum amount of memory requested for the container.
    value: 128Mi
  - name: CPU_LIMIT
    displayName: CPU Limit
    description: Maximum CPU (milli) cores available for the container.
    value: 400m
  - name: CPU_REQUEST
    displayName: CPU Request
    description: Minimum CPU (milli) cores requested for the container.
    value: 200m
  - name: TAGVERSION
    displayName: tag version
    description: The version to be used.
    value: latest
    required: true
  - name: COMPLETION_DEADLINE_SECONDS
    displayName: Completion Deadline Seconds
    description: how long the docker build of the component can last before it is canceled
    value: "1800"
objects:
  - apiVersion: v1
    kind: Service
    metadata:
      name: '${COMPONENT}'
    spec:
      ports:
        -   name: 8080-tcp
            port: 8080
            protocol: TCP
            targetPort: 8080
      selector:
        app: '${PROJECT}-${COMPONENT}'
        deploymentconfig: '${COMPONENT}'
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: '${COMPONENT}-backend'
    spec:
      lookupPolicy:
        local: false
  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: '${COMPONENT}-frontend'
    spec:
      lookupPolicy:
        local: false
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      name: ${COMPONENT}-frontend
    spec:
      completionDeadlineSeconds: "${{COMPLETION_DEADLINE_SECONDS}}"
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: ${COMPONENT}-frontend:${TAGVERSION}
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        type: Binary
        binary: {}
      strategy:
        type: Docker
        dockerStrategy: {}
      successfulBuildsHistoryLimit: 5
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      name: ${COMPONENT}-backend
    spec:
      completionDeadlineSeconds: "${{COMPLETION_DEADLINE_SECONDS}}"
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: ${COMPONENT}-backend:${TAGVERSION}
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        type: Binary
        binary: {}
      strategy:
        type: Docker
        dockerStrategy: {}
      successfulBuildsHistoryLimit: 5
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      finalizers:
        - kubernetes.io/pvc-protection
      labels:
        app: ${PROJECT}-${COMPONENT}
      name: ${COMPONENT}-backend
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 1Gi
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: '${COMPONENT}'
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: '${PROJECT}-${COMPONENT}'
        deploymentconfig: '${COMPONENT}'
      strategy:
        activeDeadlineSeconds: 21600
        resources:
          limits:
            cpu:  '${CPU_LIMIT}'
            memory: '${MEMORY_LIMIT}'
          requests:
            cpu:  '${CPU_REQUEST}'
            memory: '${MEMORY_REQUEST}'
        type: Recreate
      template:
        metadata:
          labels:
            app: '${PROJECT}-${COMPONENT}'
            deploymentconfig: '${COMPONENT}'
            env: '${ENV}'
        spec:
          containers:
            - image: '${PROJECT}-${ENV}/${COMPONENT}-frontend:${TAGVERSION}'
              imagePullPolicy: IfNotPresent
              name: '${COMPONENT}-frontend'
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources:
                limits:
                  cpu:  '${CPU_LIMIT}'
                  memory: '${MEMORY_LIMIT}'
                requests:
                  cpu:  '${CPU_REQUEST}'
                  memory: '${MEMORY_REQUEST}'
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              env:
                - name: DSN
                  value: 'user4HB:oK1WPDBNnDDspd5x@tcp(localhost:3306)/socksdb'
                - name: MYSQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: '${COMPONENT}'
                - name: MYSQL_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: '${COMPONENT}'
                - name: MYSQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: '${COMPONENT}'
                - name: MYSQL_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-root-password
                      name: '${COMPONENT}'
                - name: MYSQL_HOST
                  value: 127.0.0.1
            - image: '${PROJECT}-${ENV}/${COMPONENT}-backend:${TAGVERSION}'
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 3306
                timeoutSeconds: 1
              name: '${COMPONENT}-backend'
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -i
                    - -c
                    - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE
                      -e 'SELECT 1'
                failureThreshold: 3
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 2
              resources:
                limits:
                  cpu:  '${CPU_LIMIT}'
                  memory: '${MEMORY_LIMIT}'
                requests:
                  cpu:  '${CPU_REQUEST}'
                  memory: '${MEMORY_REQUEST}'
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              env:
                - name: MYSQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: '${COMPONENT}'
                - name: MYSQL_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: '${COMPONENT}'
                - name: MYSQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: '${COMPONENT}'
                - name: MYSQL_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-root-password
                      name: '${COMPONENT}'
              volumeMounts:
                - mountPath: /var/lib/mysql/data
                  name: ${COMPONENT}-backend-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - name: ${COMPONENT}-backend-data
              persistentVolumeClaim:
                claimName: ${COMPONENT}-backend
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - '${COMPONENT}-backend'
            from:
              kind: ImageStreamTag
              name: '${COMPONENT}-backend:${TAGVERSION}'
              namespace: '${PROJECT}-${ENV}'
          type: ImageChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - '${COMPONENT}-frontend'
            from:
              kind: ImageStreamTag
              name: '${COMPONENT}-frontend:${TAGVERSION}'
              namespace: '${PROJECT}-${ENV}'
          type: ImageChange
  - apiVersion: v1
    data:
      database-name: c29ja3NkYg==
      database-password: b0sxV1BEQk5uRERzcGQ1eA==
      database-root-password: YzNDSndNR0JzdThSYkFXcQ==
      database-user: dXNlcjRIQg==
    kind: Secret
    metadata:
      labels:
        app: '${PROJECT}-${COMPONENT}'
      name: '${COMPONENT}'
    type: Opaque
