def odsNamespace = env.ODS_NAMESPACE ?: 'ods'
def odsGitRef = env.ODS_GIT_REF ?: 'master'
def odsImageTag = env.ODS_IMAGE_TAG ?: 'latest'

library("ods-jenkins-shared-library@${odsGitRef}")

def springCliVersion = '2.2.6.RELEASE'

odsQuickstarterPipeline(
  imageStreamTag: "${odsNamespace}/jenkins-agent-maven:${odsImageTag}",
) { context ->

  stage('Build spring project') {
    dir(context.targetDir) {
      sh "curl https://start.spring.io/starter.tgz \
            -d type=gradle-project \
            -d language=java \
            -d dependencies='web,jersey,data-jpa,h2,lombok,data-rest,restdocs,security' \
            -d platformVersion=${springCliVersion} \
            -d packaging=jar \
            -d jvmVersion=1.11 \
            -d groupId=${context.projectId} \
            -d artifactId=${context.componentId} \
            -d name=${context.componentId} \
            -d description='OpenDevStack%20Demo%20Project%20for%20Spring%20Boot' \
            -d packageName='${context.packageName}' \
            | tar -zxvf - "

      withEnv(["COMPONENT=${context.componentId}", "GROUP=${context.group}"]) {
        sh "sh ${env.WORKSPACE}/${context.sourceDir}/postProcessProjectsettings.sh"
      }
    }
  }

  odsQuickstarterStageCopyFiles(context)

  odsQuickstarterStageCreateOpenShiftResources(
    context,
    [directory: 'common/ocp-config/component-environment']
  )

  odsQuickstarterStageRenderJenkinsfile(context)

  odsQuickstarterStageRenderSonarProperties(context)
}
